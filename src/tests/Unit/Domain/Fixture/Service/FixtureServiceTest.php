<?php

namespace Tests\Unit\Domain\Fixture\Service;

use App\Domain\Fixture\Entity\Fixture;
use App\Domain\Fixture\Exception\AllGamesPlayedException;
use App\Domain\Fixture\Repository\FixtureRepository;
use App\Domain\Fixture\Service\FixtureService;
use App\Domain\Fixture\Service\StandingCalculatorService;
use Tests\TestCase;

class FixtureServiceTest extends TestCase
{
    private FixtureService $fixtureService;

    protected function setUp(): void
    {
        $this->fixtureService = app()->make(FixtureService::class);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testAreFixturesExist()
    {
        $this->assertFalse($this->fixtureService->areFixturesExist());
        Fixture::factory()->create();
        $this->assertTrue($this->fixtureService->areFixturesExist());
    }

    public function testGetCurrentTourShouldThrowAnExceptionWhenAllGamesHasBeenPlayed()
    {
        Fixture::factory()->count(2)->create([
            'is_played' => true,
            'tour' => 1
        ]);

        Fixture::factory()->count(2)->create([
            'is_played' => true,
            'tour' => 2
        ]);


        $this->expectException(AllGamesPlayedException::class);
        $this->fixtureService->getCurrentTour();
    }

    public function testGetCurrentTour()
    {
        Fixture::factory()->count(2)->create([
            'is_played' => true,
            'tour' => 1
        ]);

        Fixture::factory()->count(2)->create([
            'is_played' => false,
            'tour' => 2
        ]);

        Fixture::factory()->count(2)->create([
            'is_played' => false,
            'tour' => 3
        ]);

        $tour = $this->fixtureService->getCurrentTour();
        $this->assertEquals(2, $tour);
    }

    public function testGetAllFixtures()
    {
        $games = $this->fixtureService->getAllFixtures();
        $this->assertCount(0, $games);

        Fixture::factory()->count(2)->create([
            'is_played' => true,
            'tour' => 1
        ]);

        Fixture::factory()->create([
            'is_played' => false,
            'tour' => 1
        ]);

        Fixture::factory()->count(3)->create([
            'is_played' => true,
            'tour' => 2
        ]);


        $this->assertCount(6, $this->fixtureService->getAllFixtures());
    }

    public function testGetFixturesForTheTour()
    {
        $games = $this->fixtureService->getFixturesForTheTour(1);
        $this->assertCount(0, $games);

        Fixture::factory()->count(2)->create([
            'is_played' => true,
            'tour' => 1
        ]);

        Fixture::factory()->create([
            'is_played' => false,
            'tour' => 1
        ]);

        Fixture::factory()->create([
            'is_played' => false,
            'tour' => 2
        ]);

        $this->assertCount(3, $this->fixtureService->getFixturesForTheTour(1));
    }

    public function testDeleteAllFixtures()
    {
        $this->fixtureService->deleteAllFixtures();
        $this->assertDatabaseCount('fixtures', 0);

        Fixture::factory()->count(12)->create();

        $this->assertDatabaseCount('fixtures', 12);
        $this->fixtureService->deleteAllFixtures();
        $this->assertDatabaseCount('fixtures', 0);
    }

    public function testDeleteAllFixturesMocked()
    {
        /** @var FixtureRepository $fixtureRepository */
        $fixtureRepository = $this->mock(FixtureRepository::class, function ($mock) {
            $mock->shouldReceive('deleteFixtures')->once();
        });
        /** @var StandingCalculatorService $standingCalculatorService */
        $standingCalculatorService = $this->mock(StandingCalculatorService::class, function ($mock) {
           $mock->shouldReceive('recalculateStandings')->once();
        });

        $service = new FixtureService($fixtureRepository, $standingCalculatorService);
        $service->deleteAllFixtures();
    }

}
