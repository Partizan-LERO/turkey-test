<?php

namespace Tests\Unit\Domain\Fixture\Repository;

use App\Domain\Fixture\Entity\Fixture;
use App\Domain\Fixture\Exception\AllGamesPlayedException;
use App\Domain\Fixture\Repository\FixtureRepository;
use App\Domain\Team\Entity\Team;
use Tests\TestCase;

class FixtureRepositoryTest extends TestCase
{
    private FixtureRepository $fixtureRepository;

    protected function setUp(): void
    {
        $this->fixtureRepository = new FixtureRepository();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testAreFixturesGenerated()
    {
        $this->assertFalse($this->fixtureRepository->areFixturesGenerated());
        Fixture::factory()->create();
        $this->assertTrue($this->fixtureRepository->areFixturesGenerated());
    }

    public function testGetMaxUnplayedTourShouldThrowAnExceptionWhenNoFixtures()
    {
        $this->expectException(AllGamesPlayedException::class);
        $this->fixtureRepository->getMaxUnplayedTour();
    }

    public function testGetMaxUnplayedTourShouldThrowAnExceptionWhenAllGamesHasBeenPlayed()
    {
        Fixture::factory()->count(2)->create([
            'is_played' => true,
            'tour' => 1
        ]);

        Fixture::factory()->count(2)->create([
            'is_played' => true,
            'tour' => 2
        ]);


        $this->expectException(AllGamesPlayedException::class);
        $this->fixtureRepository->getMaxUnplayedTour();
    }

    public function testGetMaxUnplayedTour()
    {
        Fixture::factory()->count(2)->create([
            'is_played' => true,
            'tour' => 1
        ]);

        Fixture::factory()->count(2)->create([
            'is_played' => false,
            'tour' => 2
        ]);

        Fixture::factory()->count(2)->create([
            'is_played' => false,
            'tour' => 3
        ]);

        $tour = $this->fixtureRepository->getMaxUnplayedTour();
        $this->assertEquals(3, $tour);
    }

    public function testGetFirstUnplayedTourShouldThrowAnExceptionWhenAllGamesHasBeenPlayed()
    {
        Fixture::factory()->count(2)->create([
            'is_played' => true,
            'tour' => 1
        ]);

        Fixture::factory()->count(2)->create([
            'is_played' => true,
            'tour' => 2
        ]);


        $this->expectException(AllGamesPlayedException::class);
        $this->fixtureRepository->getFirstUnplayedTour();
    }

    public function testGetFirstUnplayedTour()
    {
        Fixture::factory()->count(2)->create([
            'is_played' => true,
            'tour' => 1
        ]);

        Fixture::factory()->count(2)->create([
            'is_played' => false,
            'tour' => 2
        ]);

        Fixture::factory()->count(2)->create([
            'is_played' => false,
            'tour' => 3
        ]);

        $tour = $this->fixtureRepository->getFirstUnplayedTour();
        $this->assertEquals(2, $tour);
    }

    public function testDeleteFixtures()
    {
        $this->fixtureRepository->deleteFixtures();
        $this->assertDatabaseCount('fixtures', 0);

        Fixture::factory()->count(12)->create();

        $this->assertDatabaseCount('fixtures', 12);
        $this->fixtureRepository->deleteFixtures();
        $this->assertDatabaseCount('fixtures', 0);
    }

    public function testGetUnplayedGamesInTour()
    {
        Fixture::factory()->count(2)->create([
            'is_played' => true,
            'tour' => 1
        ]);

        $fixture = Fixture::factory()->create([
            'is_played' => false,
            'tour' => 1
        ]);

        $games = $this->fixtureRepository->getUnplayedGamesInTour(1);
        $this->assertCount(1, $games);
        $this->assertEquals($fixture->home_team_id, $games[0]->home_team_id);
        $this->assertEquals($fixture->away_team_id, $games[0]->away_team_id);
        $this->assertEquals($fixture->home_goals, $games[0]->home_goals);
        $this->assertEquals($fixture->away_goals, $games[0]->away_goals);
        $this->assertEquals(0, $games[0]->is_played);
    }

    public function testGetGamesInTour()
    {
        $games = $this->fixtureRepository->getGamesInTour(1);
        $this->assertCount(0, $games);

        Fixture::factory()->count(2)->create([
            'is_played' => true,
            'tour' => 1
        ]);

        Fixture::factory()->create([
            'is_played' => false,
            'tour' => 1
        ]);

        Fixture::factory()->create([
            'is_played' => false,
            'tour' => 2
        ]);

        $this->assertCount(3, $this->fixtureRepository->getGamesInTour(1));
    }

    public function testGetAllPlayedFixtures()
    {
        $games = $this->fixtureRepository->getAllPlayedFixtures();
        $this->assertCount(0, $games);

        Fixture::factory()->count(2)->create([
            'is_played' => true,
            'tour' => 1
        ]);

        Fixture::factory()->create([
            'is_played' => false,
            'tour' => 1
        ]);

        Fixture::factory()->count(3)->create([
            'is_played' => true,
            'tour' => 2
        ]);

        $this->assertCount(5, $this->fixtureRepository->getAllPlayedFixtures());
    }

    public function testGetAllFixtures()
    {
        $games = $this->fixtureRepository->getAllPlayedFixtures();
        $this->assertCount(0, $games);

        Fixture::factory()->count(2)->create([
            'is_played' => true,
            'tour' => 1
        ]);

        Fixture::factory()->create([
            'is_played' => false,
            'tour' => 1
        ]);

        Fixture::factory()->count(3)->create([
            'is_played' => true,
            'tour' => 2
        ]);


        $this->assertCount(6, $this->fixtureRepository->getAllFixtures());
    }

    public function testSave()
    {
        $teams = Team::factory()->count(2)->create();
        $fixture = new Fixture();
        $fixture->home_team_id = $teams[0]->id;
        $fixture->away_team_id = $teams[1]->id;
        $fixture->tour = 1;

        $this->assertDatabaseMissing('fixtures', [
            'home_team_id' => $teams[0]->id,
            'away_team_id' => $teams[1]->id,
            'tour' => 1,
        ]);

        $this->fixtureRepository->save($fixture);

        $this->assertDatabaseHas('fixtures', [
            'home_team_id' => $teams[0]->id,
            'away_team_id' => $teams[1]->id,
            'tour' => 1,
        ]);
    }
}
